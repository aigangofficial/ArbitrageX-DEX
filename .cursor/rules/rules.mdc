---
description: 
globs: 
---
Updated rules.mdc

@autonomous Execute Full Deployment & Monitoring Sequence

This rule ensures full deployment, infrastructure activation, and continuous monitoring with safety protocols in place.

1.⁠ ⁠Environment Setup & Validation
	•	[Auto] Validate .env existence → Create from .env.example if missing.
	•	[Auto] Install all dependencies:

npm install --silent


	•	[Auto] Compile contracts with forced recompilation:

npx hardhat compile --force


	•	[Auto] Verify project structure against README.md and ensure all required files exist:
	•	contracts/FlashLoanService.sol
	•	contracts/ArbitrageExecutor.sol
	•	contracts/TokenSwap.sol
	•	backend/services/realTimeDataFetcher.js
	•	frontend/utils/apiHelpers.js
	•	scripts/deploy.js, verify.js, arbitrage-test.js

2.⁠ ⁠Smart Contract Deployment
	•	[Check] Verify Sepolia testnet connectivity.
	•	[Execute] Deploy smart contracts:

npx hardhat run scripts/deploy-flashloan.js --network sepolia --non-interactive
npx hardhat run scripts/deploy-arbitrage.js --network sepolia --non-interactive


	•	[Auto] Store deployed contract addresses in /deployed/sepolia.json.

3.⁠ ⁠Backend & Real-Time Data Activation
	•	[Execute] Start real-time price fetching service:

docker-compose -f backend/docker-compose.yml up -d --build --force-recreate


	•	[Execute] Start API server and execution engine:

cd backend/api && npm run start:prod
cd backend/execution && npm run bot:start


	•	[Execute] Start real-time arbitrage monitoring:

cd backend/services && npm run start:realTimeData


	•	[Auto] Wait 60s for all services to initialize.
	•	[Execute] Health check API request:

curl -s -X POST http://localhost:3000/api/v1/system/healthcheck > /logs/healthcheck.log

4.⁠ ⁠Frontend Deployment & Dashboard Activation
	•	[Execute] Build and start the frontend dashboard:

cd frontend && npm run build
serve -s build -l 3001


	•	[Auto] Verify connection to backend API and smart contracts.

5.⁠ ⁠Verification & Monitoring
	•	[Auto] Scan Docker container status → Restart failed services.
	•	[Auto] Initialize Sentry monitoring with DSN=${SENTRY_DSN}.
	•	[Auto] Establish Discord webhook alerts for real-time status updates.
	•	[Auto] Validate real-time price updates and compare against testnet data.

6.⁠ ⁠Safety Protocols & Rollback Mechanism

✅ –dry-run if .env contains "YOUR_" placeholders.
✅ Auto-skip already deployed contracts.
✅ Secure sanitization of console output.
✅ Error Handling → Auto-retry (max 3 attempts).
✅ Critical failure → Rollback to last stable commit.

7.⁠ ⁠Initiate Deployment Sequence

Trigger the full deployment and monitoring process.

(Track) → Fully updated with real-time data fetching, monitoring, and improved deployment automation.